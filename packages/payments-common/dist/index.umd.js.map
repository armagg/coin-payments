{"version":3,"file":"index.umd.js","sources":["../src/types.ts","../src/utils.ts","../src/errors.ts"],"sourcesContent":["import * as t from 'io-ts'\nimport {\n  requiredOptionalCodec,\n  extendCodec,\n  enumCodec,\n  nullable,\n  DateT,\n  Logger,\n  functionT,\n  Numeric,\n  optional,\n} from '@faast/ts-common'\n\nexport type MaybePromise<T> = Promise<T> | T\n\nexport const NullableOptionalString = t.union([t.string, t.null, t.undefined])\nexport type NullableOptionalString = t.TypeOf<typeof NullableOptionalString>\n\nexport enum NetworkType {\n  Mainnet = 'mainnet',\n  Testnet = 'testnet',\n}\nexport const NetworkTypeT = enumCodec<NetworkType>(NetworkType, 'NetworkType')\n\nexport const BaseConfig = t.partial(\n  {\n    network: NetworkTypeT,\n    logger: Logger,\n  },\n  'BaseConfig',\n)\nexport type BaseConfig = t.TypeOf<typeof BaseConfig>\n\nexport const KeyPairsConfigParam = t.union([\n  t.array(NullableOptionalString),\n  t.record(t.number, NullableOptionalString)\n], 'KeyPairsConfigParam')\nexport type KeyPairsConfigParam = t.TypeOf<typeof KeyPairsConfigParam>\n\nexport const Payport = requiredOptionalCodec(\n  {\n    address: t.string,\n  },\n  {\n    extraId: nullable(t.string),\n  },\n  'Payport',\n)\nexport type Payport = t.TypeOf<typeof Payport>\n\nexport const ResolveablePayport = t.union([Payport, t.string, t.number], 'ResolveablePayport')\nexport type ResolveablePayport = t.TypeOf<typeof ResolveablePayport>\n\nexport enum FeeLevel {\n  Custom = 'custom',\n  Low = 'low',\n  Medium = 'medium',\n  High = 'high',\n}\nexport const FeeLevelT = enumCodec<FeeLevel>(FeeLevel, 'FeeLevel')\n\nexport const AutoFeeLevels = t.keyof({\n  [FeeLevel.Low]: null,\n  [FeeLevel.Medium]: null,\n  [FeeLevel.High]: null,\n}, 'AutoFeeLevels')\nexport type AutoFeeLevels = t.TypeOf<typeof AutoFeeLevels>\n\nexport enum FeeRateType {\n  Main = 'main', // ie bitcoins, ethers\n  Base = 'base', // ie satoshis, wei\n  BasePerWeight = 'base/weight', // ie satoshis per byte, gas price (wei per gas)\n}\nexport const FeeRateTypeT = enumCodec<FeeRateType>(FeeRateType, 'FeeRateType')\n\nexport const FeeRate = t.type({\n  feeRate: t.string,\n  feeRateType: FeeRateTypeT,\n}, 'FeeRate')\nexport type FeeRate = t.TypeOf<typeof FeeRate>\n\nexport const FeeOptionCustom = extendCodec(\n  FeeRate,\n  {},\n  {\n    feeLevel: t.literal(FeeLevel.Custom),\n  },\n  'FeeOptionCustom',\n)\nexport type FeeOptionCustom = t.TypeOf<typeof FeeOptionCustom>\n\nexport const FeeOptionLevel = t.partial(\n  {\n    feeLevel: t.union([t.literal(FeeLevel.High), t.literal(FeeLevel.Medium), t.literal(FeeLevel.Low)]),\n  },\n  'FeeOptionLevel',\n)\nexport type FeeOptionLevel = t.TypeOf<typeof FeeOptionLevel>\n\nexport const FeeOption = t.union([FeeOptionCustom, FeeOptionLevel], 'FeeOption')\nexport type FeeOption = t.TypeOf<typeof FeeOption>\n\nexport const UtxoInfo = requiredOptionalCodec(\n  {\n    txid: t.string,\n    vout: t.number,\n    value: t.string, // main denomination\n  },\n  {\n    satoshis: t.union([t.number, t.string]),\n    confirmations: t.number,\n    height: t.string,\n    lockTime: t.string,\n    coinbase: t.boolean,\n  },\n  'UtxoInfo',\n)\nexport type UtxoInfo = t.TypeOf<typeof UtxoInfo>\n\nexport const WeightedChangeOutput = t.type(\n  {\n    address: t.string,\n    weight: t.number,\n  },\n  'WeightedChangeOutput',\n)\nexport type WeightedChangeOutput = t.TypeOf<typeof WeightedChangeOutput>\n\nexport const CreateTransactionOptions = extendCodec(\n  FeeOption,\n  {},\n  {\n    sequenceNumber: Numeric, // Ripple/Stellar/Ethereum sequence number or nonce\n    payportBalance: Numeric, // Spendable balance at the from payport (useful in conjunction with a BalanceMonitor)\n    utxos: t.array(UtxoInfo), // Available utxos - ones that can be used\n    useAllUtxos: t.boolean, // Uses all available utxos (sweep)\n    useUnconfirmedUtxos: t.boolean,\n  },\n  'CreateTransactionOptions',\n)\nexport type CreateTransactionOptions = t.TypeOf<typeof CreateTransactionOptions>\n\nexport const GetPayportOptions = t.partial({}, 'GetPayportOptions')\nexport type GetPayportOptions = t.TypeOf<typeof GetPayportOptions>\n\nexport const ResolvedFeeOption = t.type({\n  targetFeeLevel: FeeLevelT,\n  targetFeeRate: t.string,\n  targetFeeRateType: FeeRateTypeT,\n  feeBase: t.string,\n  feeMain: t.string,\n}, 'ResolvedFeeOption')\nexport type ResolvedFeeOption = t.TypeOf<typeof ResolvedFeeOption>\n\nexport const BalanceResult = t.type(\n  {\n    confirmedBalance: t.string, // balance with at least 1 confirmation\n    unconfirmedBalance: t.string, // balance that is pending confirmation\n    sweepable: t.boolean, // balance is high enough to be swept\n  },\n  'BalanceResult',\n)\nexport type BalanceResult = t.TypeOf<typeof BalanceResult>\n\nexport enum TransactionStatus {\n  Unsigned = 'unsigned',\n  Signed = 'signed',\n  Pending = 'pending',\n  Confirmed = 'confirmed',\n  Failed = 'failed',\n}\nexport const TransactionStatusT = enumCodec<TransactionStatus>(TransactionStatus, 'TransactionStatus')\n\nexport const TransactionOutput = requiredOptionalCodec(\n  {\n    address: t.string,\n    value: t.string,\n  },\n  {\n    extraId: nullable(t.string),\n  },\n  'TransactionOutput',\n)\nexport type TransactionOutput = t.TypeOf<typeof TransactionOutput>\n\nexport const TransactionCommon = requiredOptionalCodec(\n  {\n    status: TransactionStatusT,\n    id: nullable(t.string), // network txid\n    fromAddress: nullable(t.string), // sender address\n    toAddress: nullable(t.string), // recipient address\n    fromIndex: nullable(t.number), // sender address index\n    toIndex: nullable(t.number), // recipient address index, null if not ours\n    amount: nullable(t.string), // main denomination (eg \"0.125\")\n    fee: nullable(t.string), // total fee in main denomination\n  },\n  {\n    fromExtraId: nullable(t.string), // eg ripple sender tag\n    toExtraId: nullable(t.string), // eg Monero payment ID or ripple destination tag\n    sequenceNumber: nullable(t.union([t.string, t.number])), // eg Ethereum nonce or ripple sequence\n    inputUtxos: t.array(UtxoInfo),\n    externalOutputs: t.array(TransactionOutput)\n  },\n  'TransactionCommon',\n)\nexport type TransactionCommon = t.TypeOf<typeof TransactionCommon>\n\nconst UnsignedCommon = extendCodec(\n  TransactionCommon,\n  {\n    fromAddress: t.string,\n    toAddress: t.string,\n    fromIndex: t.number,\n    targetFeeLevel: FeeLevelT,\n    targetFeeRate: nullable(t.string),\n    targetFeeRateType: nullable(FeeRateTypeT),\n  },\n  'UnsignedCommon',\n)\ntype UnsignedCommon = t.TypeOf<typeof UnsignedCommon>\n\nexport const BaseUnsignedTransaction = extendCodec(\n  UnsignedCommon,\n  {\n    status: t.literal(TransactionStatus.Unsigned),\n    data: t.object,\n  },\n  'BaseUnsignedTransaction',\n)\nexport type BaseUnsignedTransaction = t.TypeOf<typeof BaseUnsignedTransaction>\n\nexport const BaseSignedTransaction = extendCodec(\n  UnsignedCommon,\n  {\n    status: t.literal(TransactionStatus.Signed),\n    id: t.string,\n    amount: t.string,\n    fee: t.string,\n    data: t.object,\n  },\n  'BaseSignedTransaction',\n)\nexport type BaseSignedTransaction = t.TypeOf<typeof BaseSignedTransaction>\n\nexport const BaseTransactionInfo = extendCodec(\n  TransactionCommon,\n  {\n    id: t.string,\n    amount: t.string,\n    fee: t.string,\n    isExecuted: t.boolean, // true if transaction didn't fail (eg TRX/ETH contract succeeded)\n    isConfirmed: t.boolean,\n    confirmations: t.number, // 0 if not confirmed\n    confirmationId: nullable(t.string), // eg block/ledger hash. null if not confirmed\n    confirmationTimestamp: nullable(DateT), // block timestamp. null if timestamp unavailable or unconfirmed\n    data: t.object,\n  },\n  {\n    currentBlockNumber: t.union([t.string, t.number]), // latest head of the blockchain\n    confirmationNumber: t.union([t.string, t.number]) // eg block number in which tx was included\n  },\n  'BaseTransactionInfo',\n)\nexport type BaseTransactionInfo = t.TypeOf<typeof BaseTransactionInfo>\n\nexport const BaseBroadcastResult = t.type(\n  {\n    id: t.string,\n  },\n  'BaseBroadcastResult',\n)\nexport type BaseBroadcastResult = t.TypeOf<typeof BaseBroadcastResult>\n\nexport const BalanceActivityType = t.union([t.literal('in'), t.literal('out')], 'BalanceActivityType')\nexport type BalanceActivityType = t.TypeOf<typeof BalanceActivityType>\n\nexport const BalanceActivity = t.type(\n  {\n    type: BalanceActivityType,\n    networkType: NetworkTypeT,\n    networkSymbol: t.string,\n    assetSymbol: t.string,\n    address: t.string,\n    extraId: nullable(t.string),\n    amount: t.string,\n    externalId: t.string,\n    activitySequence: t.string,\n    confirmationId: t.string,\n    confirmationNumber: t.union([t.string, t.number]),\n    timestamp: DateT,\n  },\n  'BalanceActivity',\n)\nexport type BalanceActivity = t.TypeOf<typeof BalanceActivity>\n\nexport const BalanceMonitorConfig = BaseConfig\nexport type BalanceMonitorConfig = t.TypeOf<typeof BalanceMonitorConfig>\n\nexport const GetBalanceActivityOptions = t.partial(\n  {\n    from: t.union([Numeric, BalanceActivity]),\n    to: t.union([Numeric, BalanceActivity]),\n  },\n  'GetBalanceActivityOptions',\n)\nexport type GetBalanceActivityOptions = t.TypeOf<typeof GetBalanceActivityOptions>\n\nexport type BalanceActivityCallback = (ba: BalanceActivity) => Promise<void> | void\nexport const BalanceActivityCallback = functionT<BalanceActivityCallback>('BalanceActivityCallback')\n\nexport type FromTo = Pick<\n  BaseUnsignedTransaction,\n  'fromAddress' | 'fromIndex' | 'fromExtraId' | 'toAddress' | 'toIndex' | 'toExtraId'\n> & { fromPayport: Payport; toPayport: Payport }\n\nexport const RetrieveBalanceActivitiesResult = t.type(\n  {\n    from: t.string,\n    to: t.string,\n  },\n  'RetrieveBalanceActivitiesResult',\n)\nexport type RetrieveBalanceActivitiesResult = t.TypeOf<typeof RetrieveBalanceActivitiesResult>\n","import BigNumber from 'bignumber.js'\nimport { Numeric } from '@faast/ts-common'\n\nexport function isMatchingError(e: Error, partialMessages: string[]) {\n  const messageLower = e.toString().toLowerCase()\n  return partialMessages.some(pm => messageLower.includes(pm.toLowerCase()))\n}\n\nexport function createUnitConverters(decimals: number) {\n  const basePerMain = new BigNumber(10).pow(decimals)\n\n  function toMainDenominationBigNumber(baseNumeric: Numeric): BigNumber {\n    const baseUnits = new BigNumber(baseNumeric)\n    if (baseUnits.isNaN()) {\n      throw new Error('Cannot convert to main denomination - not a number')\n    }\n    if (!baseUnits.isFinite()) {\n      throw new Error('Cannot convert to main denomination - not finite')\n    }\n    return baseUnits.div(basePerMain)\n  }\n\n  function toMainDenominationString(baseNumeric: Numeric): string {\n    return toMainDenominationBigNumber(baseNumeric).toString()\n  }\n\n  function toMainDenominationNumber(baseNumeric: Numeric): number {\n    return toMainDenominationBigNumber(baseNumeric).toNumber()\n  }\n\n  function toBaseDenominationBigNumber(mainNumeric: Numeric): BigNumber {\n    const mainUnits = new BigNumber(mainNumeric)\n    if (mainUnits.isNaN()) {\n      throw new Error('Cannot convert to base denomination - not a number')\n    }\n    if (!mainUnits.isFinite()) {\n      throw new Error('Cannot convert to base denomination - not finite')\n    }\n    return mainUnits.times(basePerMain)\n  }\n\n  function toBaseDenominationString(mainNumeric: Numeric): string {\n    return toBaseDenominationBigNumber(mainNumeric).toString()\n  }\n\n  function toBaseDenominationNumber(mainNumeric: Numeric): number {\n    return toBaseDenominationBigNumber(mainNumeric).toNumber()\n  }\n\n  return {\n    toMainDenominationBigNumber,\n    toMainDenominationNumber,\n    toMainDenominationString,\n    toBaseDenominationBigNumber,\n    toBaseDenominationNumber,\n    toBaseDenominationString,\n  }\n}\n","export enum PaymentsErrorCode {\n  TxExpired = 'PAYMENTS_TX_EXPIRED',\n  TxSequenceTooHigh = 'PAYMENTS_TX_SEQUENCE_TOO_HIGH',\n  TxSequenceCollision = 'PAYMENTS_TX_SEQUENCE_COLLISION',\n}\n\nexport class PaymentsError extends Error {\n  name = PaymentsError.name\n\n  constructor(public code: PaymentsErrorCode, message?: string | Error) {\n    super(typeof message === 'undefined' ? code : `${code} - ${message.toString()}`)\n  }\n}\n"],"names":["t.union","t.string","t.null","t.undefined","NetworkType","enumCodec","t.partial","Logger","t.array","t.record","t.number","requiredOptionalCodec","nullable","FeeLevel","t.keyof","FeeRateType","t.type","extendCodec","t.literal","t.boolean","Numeric","TransactionStatus","t.object","DateT","functionT","PaymentsErrorCode"],"mappings":"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"}