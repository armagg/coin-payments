{"version":3,"file":"index.umd.js","sources":["../src/constants.ts","../src/NetworkData.ts","../src/bip44.ts","../src/EthereumPaymentsUtils.ts","../src/BaseEthereumPayments.ts","../src/HdEthereumPayments.ts","../src/KeyPairEthereumPayments.ts","../src/types.ts","../src/EthereumPaymentsFactory.ts"],"sourcesContent":["import { FeeLevel } from '@faast/payments-common'\n\nexport const PACKAGE_NAME = 'ethereum-payments'\nexport const DECIMAL_PLACES = 18\n\nexport const DEFAULT_FULL_NODE = process.env.ETH_FULL_NODE_URL\nexport const DEFAULT_SOLIDITY_NODE = process.env.ETH_SOLIDITY_NODE_URL\nexport const DEFAULT_EVENT_SERVER = process.env.ETH_EVENT_SERVER_URL\nexport const DEFAULT_FEE_LEVEL = FeeLevel.Medium\n\nexport const FEE_LEVEL_MAP: { [key: string]: string } = {\n  'low': 'SLOW',\n  'medium': 'NORM',\n  'high': 'FAST',\n}\nexport const MIN_CONFIRMATIONS = 0\nexport const ETHEREUM_TRANSFER_COST = '21000'\nexport const DEFAULT_GAS_PRICE_IN_WEI = '50000000000'\nexport const GAS_STATION_URL = 'https://ethgasstation.info'\nexport const CONTRACT_DEPLOY_COST = '285839'\nexport const TOKEN_SWEEP_COST = '816630'\nexport const TOKEN_TRANSFER_COST = '250000'\n\nexport const SPEED: { [key: string]: string } = {\n  SLOW: 'safeLow',\n  NORM: 'average',\n  FAST: 'fast',\n}\nexport const PRICES: { [key: string]: string } = {\n  'ETHEREUM_TRANSFER': ETHEREUM_TRANSFER_COST,\n  'CONTRACT_DEPLOY': CONTRACT_DEPLOY_COST,\n  'TOKEN_SWEEP': TOKEN_SWEEP_COST,\n  'TOKEN_TRANSFER': TOKEN_TRANSFER_COST,\n}\n","import * as request from 'request-promise-native'\nimport { BigNumber } from 'bignumber.js'\nimport Web3 from 'web3'\nimport { provider } from 'web3-core'\nimport { Eth } from 'web3-eth'\n\nimport {\n  DEFAULT_GAS_PRICE_IN_WEI,\n  GAS_STATION_URL,\n  SPEED,\n  PRICES,\n} from './constants'\n\nexport class NetworkData {\n  private gasStationUrl: string | undefined\n  private parityUrl: string | undefined\n  private infuraUrl: string | undefined\n  private eth: Eth\n\n  constructor(gasStationUrl: string = GAS_STATION_URL, parityUrl?: string, infuraUrl?: string) {\n    this.gasStationUrl = gasStationUrl\n    this.parityUrl = parityUrl\n    this.infuraUrl = infuraUrl\n\n    this.eth = (new Web3(infuraUrl as provider)).eth\n  }\n\n  async getNetworkData(action: string, from: string, to: string, speed: string): Promise<{\n    pricePerGasUnit: string,\n    nonce: string,\n    amountOfGas: string,\n  }> {\n    const pricePerGasUnit = await this.getGasPrice(speed)\n    const nonce = await this.getNonce(from)\n    const amountOfGas = await this.estimateGas(from, to, action)\n\n    return {\n      pricePerGasUnit,\n      amountOfGas,\n      nonce,\n    }\n  }\n\n  async getNonce(address: string): Promise<string> {\n    const web3Nonce = await this.getWeb3Nonce(address) || '0'\n    const parityNonce = await this.getParityNonce(address) || '0'\n\n    const nonce = BigNumber.maximum(web3Nonce, parityNonce)\n    return nonce.toNumber() ? nonce.toString() : '0'\n  }\n\n  async getGasPrice(speed: string): Promise<string> {\n    let gasPrice = await this.getGasStationGasPrice(speed)\n    if (gasPrice) return gasPrice\n\n    gasPrice = await this.getWeb3GasPrice()\n    if (gasPrice) return gasPrice\n\n    return DEFAULT_GAS_PRICE_IN_WEI\n  }\n\n  private async estimateGas(from: string, to: string, action: string): Promise<string> {\n    let gas: string | BigNumber = PRICES[action]\n    if (gas) return gas\n\n    try {\n      gas = new BigNumber(await this.eth.estimateGas({ from, to }))\n    } catch (e) {\n      return PRICES.ETHEREUM_TRANSFER\n    }\n\n    return gas.toNumber() ? gas.toString() : PRICES.ETHEREUM_TRANSFER\n  }\n\n  private async getWeb3Nonce(address: string): Promise<string> {\n    try {\n      const nonce = await this.eth.getTransactionCount(address, 'pending')\n      return (new BigNumber(nonce)).toString()\n    } catch (e) {\n      return ''\n    }\n  }\n\n  private async getParityNonce(address: string): Promise<string> {\n    const data = {\n      method: 'parity_nextNonce',\n      params: [address],\n      id: 1,\n      jsonrpc: '2.0'\n    }\n    const options = {\n      url: this.parityUrl || '',\n      json: data\n    }\n\n    let body: { [key: string]: string }\n    try {\n      body = await request.post(options)\n    } catch (e) {\n      return ''\n    }\n    if (!body || !body.result) {\n      return ''\n    }\n\n    return (new BigNumber(body.result, 16)).toString()\n  }\n\n  private async getGasStationGasPrice(speed: string): Promise<string> {\n    const options = {\n      url: `${this.gasStationUrl}/json/ethgasAPI.json`,\n      json: true,\n      timeout: 5000\n    }\n    let body: { [key: string]: number }\n    try {\n      body = await request.get(options)\n    } catch (e) {\n      return ''\n    }\n    if (!(body && body.blockNum && body[SPEED[speed]])) {\n      return ''\n    }\n\n    const price10xGwei = body[SPEED[speed]]\n\n    return (new BigNumber(price10xGwei)).multipliedBy(10).multipliedBy(1e9).toString(10)\n  }\n\n  private async getWeb3GasPrice(): Promise<string> {\n    try {\n      return await this.eth.getGasPrice()\n    } catch (e) {\n      return ''\n    }\n  }\n}\n","import { EthereumSignatory } from './types'\nimport { pubToAddress } from 'ethereumjs-util'\nimport { fromBase58, fromSeed } from 'bip32'\nimport crypto from 'crypto'\n\nimport { ec as EC } from 'elliptic'\nconst ec = new EC('secp256k1')\n\nclass EthereumBIP44 {\n  static fromExtKey(xkey: string) {\n    if (['xprv', 'xpub'].includes(xkey.substring(0, 4))) {\n        return new EthereumBIP44(fromBase58(xkey))\n    }\n\n    throw new Error('Not extended key')\n  }\n\n  private parts: string[]\n  key: any\n  constructor(hdKey: any) {\n    this.parts = [\n      'm',\n      \"44'\", // bip 44\n      \"60'\",  // coin\n      \"0'\",  // wallet\n      '0'    // 0 - public, 1 = private\n        // index\n    ]\n\n    this.key = hdKey\n  }\n\n  getAddress(index?: number): string {\n    const derived = this.deriveByIndex(index)\n    let address = pubToAddress(derived.publicKey, true)\n\n    return `0x${address.toString('hex')}`\n  }\n\n  getPrivateKey(index?: number): string {\n    const derived = this.deriveByIndex(index)\n    if (!derived.privateKey) {\n      return ''\n    }\n    return `0x${derived.privateKey.toString('hex')}`\n  }\n\n  getPublicKey(index?: number): string {\n    return this.deriveByIndex(index).publicKey.toString('hex')\n  }\n\n  getXPrivateKey(index?: number): string {\n    const key = this.deriveByIndex(index).toBase58()\n\n    return key.substring(0, 4) === 'xpub' ? '' : key\n  }\n\n  getXPublicKey(index?: number) {\n    return this.deriveByIndex(index).neutered().toBase58()\n  }\n\n  private deriveByIndex(index?: number) {\n    if (typeof index === 'undefined') {\n      return this.key\n    }\n    const path = this.parts.slice(this.key.depth)\n    const keyPath = path.length > 0 ? path.join('/') + '/' : ''\n    return this.key.derivePath(`${keyPath}${index.toString()}`)\n  }\n}\n\n// XXX if index is not provided, derived key will be hardened\nexport function deriveSignatory(xkey?: string, index?: number): EthereumSignatory {\n  const wallet = xkey ?\n    EthereumBIP44.fromExtKey(xkey) :\n    EthereumBIP44.fromExtKey(fromSeed(crypto.randomBytes(32)).toBase58())\n\n  return {\n    address: wallet.getAddress(index),\n    keys: {\n      prv: wallet.getPrivateKey(index) || '',\n      pub: wallet.getPublicKey(index),\n    },\n    xkeys: {\n      xprv: wallet.getXPrivateKey(index) || '',\n      xpub: wallet.getXPublicKey(index),\n    }\n  }\n}\n\nexport function isValidXkey(key: string): boolean {\n  try {\n    EthereumBIP44.fromExtKey(key)\n    return true\n  } catch (e) {\n    return false\n  }\n}\n","import Web3 from 'web3'\nconst web3 = new Web3()\nimport { BigNumber } from 'bignumber.js'\n\nimport { PaymentsUtils, Payport, createUnitConverters } from '@faast/payments-common'\nimport {\n  Numeric,\n  Logger,\n  DelegateLogger,\n  isNil,\n  assertType\n} from '@faast/ts-common'\nimport { PACKAGE_NAME, DECIMAL_PLACES } from './constants'\nimport {\n  BaseEthereumPaymentsConfig,\n  BaseDenominationOptions,\n} from './types'\nimport { isValidXkey } from './bip44'\n\nexport class EthereumPaymentsUtils implements PaymentsUtils {\n  logger: Logger\n\n  constructor(config: BaseEthereumPaymentsConfig) {\n    this.logger = new DelegateLogger(config.logger, PACKAGE_NAME)\n  }\n\n  toBaseDenomination(amount: Numeric, options?: BaseDenominationOptions): string {\n    const eth = (new BigNumber(amount)).toFixed(DECIMAL_PLACES, options ? options.rounding : undefined)\n\n    return web3.utils.toWei(eth)\n  }\n\n  toMainDenomination(amount: Numeric, options?: BaseDenominationOptions): string {\n    const wei = (new BigNumber(amount)).toFixed(0, options ? options.rounding : undefined)\n\n    return web3.utils.fromWei(wei)\n  }\n\n  async isValidAddress(address: string): Promise<boolean> {\n    return web3.utils.isAddress(address)\n  }\n\n  async isValidExtraId(extraId: unknown): Promise<boolean> {\n    return false\n  }\n\n  // XXX Payport methods can be moved to payments-common\n  async isValidPayport(payport: Payport): Promise<boolean> {\n    return Payport.is(payport) && ! await this._getPayportValidationMessage(payport)\n  }\n\n  async validatePayport(payport: Payport): Promise<void> {\n    const message = await this._getPayportValidationMessage(payport)\n    if (message) {\n      throw new Error(message)\n    }\n  }\n\n  async getPayportValidationMessage(payport: Payport): Promise<string | undefined> {\n    try {\n      payport = assertType(Payport, payport, 'payport')\n    } catch (e) {\n      return e.message\n    }\n    return this._getPayportValidationMessage(payport)\n  }\n\n  isValidXprv(xprv: string): boolean {\n    return isValidXkey(xprv) && xprv.substring(0, 4) === 'xprv'\n  }\n\n  isValidXpub(xpub: string): boolean {\n    return isValidXkey(xpub) && xpub.substring(0, 4) === 'xpub'\n  }\n\n  isValidPrivateKey(prv: string): boolean {\n    try {\n      return !!web3.eth.accounts.privateKeyToAccount(prv)\n    } catch (e) {\n      return false\n    }\n  }\n\n  privateKeyToAddress(prv: string): string {\n    let key: string\n    if (prv.substring(0, 2) === '0x') {\n      key = prv\n    } else {\n      key = `0x${prv}`\n    }\n\n    return web3.eth.accounts.privateKeyToAccount(key).address\n  }\n\n  private async _getPayportValidationMessage(payport: Payport): Promise<string | undefined> {\n    try {\n      const { address } = payport\n      if (!(await this.isValidAddress(address))) {\n        return 'Invalid payport address'\n      }\n    } catch (e) {\n      return 'Invalid payport address'\n    }\n    return undefined\n  }\n}\n","import { BigNumber } from 'bignumber.js'\nimport { Transaction as Tx } from 'ethereumjs-tx'\nimport Web3 from 'web3'\nimport { TransactionReceipt } from 'web3-core';\nimport { Eth } from 'web3-eth'\nimport { cloneDeep } from 'lodash'\nimport {\n  BalanceResult,\n  BasePayments,\n  TransactionStatus,\n  FeeLevel,\n  FeeOption,\n  FeeRateType,\n  FeeOptionCustom,\n  Payport,\n  FromTo,\n  ResolveablePayport,\n  PaymentsError,\n  PaymentsErrorCode,\n  CreateTransactionOptions as TransactionOptions,\n  NetworkType,\n} from '@faast/payments-common'\nimport { isType } from '@faast/ts-common'\n\nimport {\n  EthereumTransactionInfo,\n  EthereumUnsignedTransaction,\n  EthereumSignedTransaction,\n  EthereumBroadcastResult,\n  BaseEthereumPaymentsConfig,\n  EthereumResolvedFeeOption,\n} from './types'\nimport { NetworkData } from './NetworkData'\nimport {\n// TODO use them\n//  DEFAULT_FULL_NODE,\n//  DEFAULT_SOLIDITY_NODE,\n  DEFAULT_FEE_LEVEL,\n  FEE_LEVEL_MAP,\n  ETHEREUM_TRANSFER_COST,\n  MIN_CONFIRMATIONS,\n} from './constants'\nimport { EthereumPaymentsUtils } from './EthereumPaymentsUtils'\n\nexport abstract class BaseEthereumPayments\n  <Config extends BaseEthereumPaymentsConfig>\n  extends EthereumPaymentsUtils\nimplements BasePayments\n  <Config, EthereumUnsignedTransaction, EthereumSignedTransaction, EthereumBroadcastResult, EthereumTransactionInfo> {\n  private eth: Eth\n  private gasStation: NetworkData\n  private config: Config\n\n  constructor(config: Config) {\n    super(config)\n\n    this.config = config\n    this.eth = (new (Web3 as any )(config.fullNode, null, { transactionConfirmationBlocks: MIN_CONFIRMATIONS })).eth\n    this.gasStation = new NetworkData(config.gasStation, config.parityNode, config.fullNode)\n  }\n\n  // XXX Violates Interface Segregation Principle\n  async init() {}\n  async destroy() {}\n\n  getFullConfig(): Config {\n    return this.config\n  }\n\n  abstract getPublicConfig(): Config\n\n  async resolvePayport(payport: ResolveablePayport): Promise<Payport> {\n    // NOTE: this type of nesting suggests to revise payport as an abstraction\n    if (typeof payport === 'number') {\n      return this.getPayport(payport)\n    } else if (typeof payport === 'string') {\n      if (!await this.isValidAddress(payport)) {\n        throw new Error(`Invalid Ethereum address: ${payport}`)\n      }\n      return { address: payport }\n    }\n\n    if (!await this.isValidPayport(payport)) {\n      throw new Error(`Invalid Ethereum payport: ${JSON.stringify(payport)}`)\n    } else {\n      if(!await this.isValidAddress(payport.address)) {\n        throw new Error(`Invalid Ethereum payport: ${JSON.stringify(payport)}`)\n      }\n    }\n    return payport\n  }\n\n  async resolveFromTo(from: number, to: ResolveablePayport): Promise<FromTo> {\n    const fromPayport = await this.getPayport(from)\n    const toPayport = await this.resolvePayport(to)\n    return {\n      fromAddress: fromPayport.address,\n      fromIndex: from,\n      fromExtraId: fromPayport.extraId,\n      fromPayport,\n      toAddress: toPayport.address,\n      toIndex: typeof to === 'number' ? to : null,\n      toExtraId: toPayport.extraId,\n      toPayport,\n    }\n  }\n\n  async resolveFeeOption(feeOption: FeeOption): Promise<EthereumResolvedFeeOption> {\n    return isType(FeeOptionCustom, feeOption)\n      ? this.resolveCustomFeeOption(feeOption)\n      : this.resolveLeveledFeeOption(feeOption)\n  }\n\n  private resolveCustomFeeOption(feeOption: FeeOptionCustom): EthereumResolvedFeeOption {\n    const isWeight = (feeOption.feeRateType === FeeRateType.BasePerWeight)\n    const isMain = (feeOption.feeRateType === FeeRateType.Main)\n\n    const gasPrice = isWeight\n      ? feeOption.feeRate\n      : (new BigNumber(feeOption.feeRate)).dividedBy(ETHEREUM_TRANSFER_COST).toString()\n    const fee = isWeight\n      ? (new BigNumber(feeOption.feeRate)).multipliedBy(ETHEREUM_TRANSFER_COST).toString()\n      : feeOption.feeRate\n\n    return {\n      targetFeeRate:     feeOption.feeRate,\n      targetFeeLevel:    FeeLevel.Custom,\n      targetFeeRateType: feeOption.feeRateType,\n      feeBase:           isMain ? this.toBaseDenomination(fee) : fee,\n      feeMain:           isMain ? fee : this.toMainDenomination(fee),\n      gasPrice:          isMain ? this.toBaseDenomination(gasPrice, { rounding: 7 }) : gasPrice\n    }\n  }\n\n  private async resolveLeveledFeeOption(feeOption: FeeOption): Promise<EthereumResolvedFeeOption> {\n    const targetFeeLevel = feeOption.feeLevel || DEFAULT_FEE_LEVEL\n    const targetFeeRate = await this.gasStation.getGasPrice(FEE_LEVEL_MAP[targetFeeLevel])\n    const feeBase = (new BigNumber(targetFeeRate)).multipliedBy(ETHEREUM_TRANSFER_COST).toString()\n\n    return {\n      targetFeeRate,\n      targetFeeLevel,\n      targetFeeRateType: FeeRateType.BasePerWeight,\n      feeBase,\n      feeMain: this.toMainDenomination(feeBase),\n      gasPrice: targetFeeRate,\n    }\n  }\n\n  abstract getAccountIds(): string[]\n\n  abstract getAccountId(index: number): string\n\n  requiresBalanceMonitor() {\n    return false\n  }\n\n  async getAvailableUtxos() {\n    return []\n  }\n\n  async getUtxos() {\n    return []\n  }\n\n  usesSequenceNumber() {\n    return true\n  }\n\n  usesUtxos() {\n    return false\n  }\n\n  abstract async getPayport(index: number): Promise<Payport>\n\n  async getBalance(resolveablePayport: ResolveablePayport): Promise<BalanceResult> {\n    const payport = await this.resolvePayport(resolveablePayport)\n    const balance = await this.eth.getBalance(payport.address)\n    const sweepable = await this.isSweepableBalance(balance)\n\n    return {\n      confirmedBalance: this.toMainDenomination(balance),\n      unconfirmedBalance: '0',\n      sweepable,\n    }\n  }\n\n  async isSweepableBalance(balanceEth: string): Promise<boolean> {\n    const feeOption = await this.resolveFeeOption({})\n\n    const feeWei = new BigNumber(feeOption.feeBase)\n    const balanceWei = new BigNumber(this.toBaseDenomination(balanceEth))\n\n    if (balanceWei.minus(feeWei).isLessThanOrEqualTo(0)) {\n      return false\n    }\n    return true\n  }\n\n  async getNextSequenceNumber(payport: ResolveablePayport) {\n    const resolvedPayport = await this.resolvePayport(payport)\n    const sequenceNumber = await this.gasStation.getNonce(resolvedPayport.address)\n\n    return sequenceNumber\n  }\n\n  async getTransactionInfo(txid: string): Promise<EthereumTransactionInfo> {\n    // XXX it is suggested to keep 12 confirmations\n    // https://ethereum.stackexchange.com/questions/319/what-number-of-confirmations-is-considered-secure-in-ethereum\n    const minConfirmations = MIN_CONFIRMATIONS\n    const tx = await this.eth.getTransaction(txid)\n    const currentBlockNumber = await this.eth.getBlockNumber()\n    let txInfo: TransactionReceipt | null = await this.eth.getTransactionReceipt(txid)\n\n    // NOTE: for the sake of consistent schema return\n    if (!txInfo) {\n      txInfo = {\n        transactionHash: tx.hash,\n        from: tx.from || '',\n        to: tx.to || '',\n        status: true,\n        blockNumber: 0,\n        cumulativeGasUsed: 0,\n        gasUsed: parseInt(ETHEREUM_TRANSFER_COST, 10),\n        transactionIndex: 0,\n        blockHash: '',\n        logs: [],\n        logsBloom: ''\n      }\n\n      return {\n        id: txid,\n        amount: this.toMainDenomination(tx.value),\n        toAddress: tx.to,\n        fromAddress: tx.from,\n        toExtraId: null,\n        fromIndex: null,\n        toIndex: null,\n        fee: this.toMainDenomination((new BigNumber(tx.gasPrice)).multipliedBy(tx.gas)),\n        sequenceNumber: tx.nonce,\n        isExecuted: false,\n        isConfirmed: false,\n        confirmations: 0,\n        confirmationId: null,\n        confirmationTimestamp: null,\n        status: TransactionStatus.Pending,\n        data: {\n          ...tx,\n          ...txInfo,\n          currentBlock: currentBlockNumber\n        },\n      }\n    }\n\n    let txBlock: any = null\n    let isConfirmed = false\n    let confirmationTimestamp: Date | null = null\n    let confirmations = 0\n    if (tx.blockNumber) {\n      confirmations = currentBlockNumber - tx.blockNumber\n      if (confirmations > minConfirmations) {\n        isConfirmed = true\n        txBlock = await this.eth.getBlock(tx.blockNumber)\n        confirmationTimestamp = new Date(txBlock.timestamp)\n      }\n    }\n\n    let status: TransactionStatus = TransactionStatus.Pending\n    if (isConfirmed) {\n      status = TransactionStatus.Confirmed\n      // No trust to types description of web3\n      if (txInfo.hasOwnProperty('status') && (txInfo.status === false || txInfo.status.toString() === 'false')) {\n        status = TransactionStatus.Failed\n      }\n    }\n\n    return {\n      id: txid,\n      amount: this.toMainDenomination(tx.value),\n      toAddress: tx.to,\n      fromAddress: tx.from,\n      toExtraId: null,\n      fromIndex: null,\n      toIndex: null,\n      fee: this.toMainDenomination((new BigNumber(tx.gasPrice)).multipliedBy(txInfo.gasUsed)),\n      sequenceNumber: tx.nonce,\n      // XXX if tx was confirmed but not accepted by network isExecuted must be false\n      isExecuted: status !== TransactionStatus.Failed,\n      isConfirmed,\n      confirmations,\n      confirmationId: tx.blockHash,\n      confirmationTimestamp,\n      status,\n      data: {\n        ...tx,\n        ...txInfo,\n        currentBlock: currentBlockNumber\n      },\n    }\n  }\n\n  async createTransaction(\n    from: number,\n    to: ResolveablePayport,\n    amountEth: string,\n    options: TransactionOptions = {},\n  ): Promise<EthereumUnsignedTransaction> {\n    this.logger.debug('createTransaction', from, to, amountEth)\n\n    return this.createTransactionObject(from, to, amountEth, options)\n  }\n\n  async createSweepTransaction(\n    from: number,\n    to: ResolveablePayport,\n    options: TransactionOptions = {},\n  ): Promise<EthereumUnsignedTransaction> {\n    this.logger.debug('createSweepTransaction', from, to)\n\n    return this.createTransactionObject(from, to, 'max', options)\n  }\n\n  async signTransaction(unsignedTx: EthereumUnsignedTransaction): Promise<EthereumSignedTransaction> {\n    const fromPrivateKey = await this.getPrivateKey(unsignedTx.fromIndex)\n    const payport = await this.getPayport(unsignedTx.fromIndex)\n\n    const unsignedRaw = cloneDeep(unsignedTx.data)\n\n    const extraParam = this.config.network === NetworkType.Testnet ?  {chain :'ropsten'} : undefined\n    const tx = new Tx(unsignedRaw, extraParam)\n    const key = Buffer.from(fromPrivateKey.slice(2), 'hex')\n    tx.sign(key)\n\n    return {\n      ...unsignedTx,\n      id: tx.hash().toString('hex'),\n      status: TransactionStatus.Signed,\n      data: {\n        hex: '0x'+tx.serialize().toString('hex')\n      }\n    }\n  }\n\n  private sendTransactionWithoutConfirmation(txHex: string): Promise<string> {\n    return new Promise((resolve, reject) => this.eth.sendSignedTransaction(txHex)\n        .on('transactionHash', resolve)\n        .on('error', reject))\n  }\n\n  async broadcastTransaction(tx: EthereumSignedTransaction): Promise<EthereumBroadcastResult> {\n    if (tx.status !== TransactionStatus.Signed) {\n      throw new Error(`Tx ${tx.id} has not status ${TransactionStatus.Signed}`)\n    }\n\n    try {\n      const txId = await this.sendTransactionWithoutConfirmation(tx.data.hex)\n      return {\n        id: txId,\n      }\n    } catch (e) {\n      this.logger.warn(`Ethereum broadcast tx unsuccessful ${tx.id}: ${e.message}`)\n      if (e.message === 'nonce too low') {\n        throw new PaymentsError(PaymentsErrorCode.TxSequenceCollision, e.message)\n      }\n      throw new Error(`Ethereum broadcast tx unsuccessful: ${tx.id} ${e.message}`)\n    }\n  }\n\n  abstract async getPrivateKey(index: number): Promise<string>\n\n  private async createTransactionObject(\n    from: number,\n    to: ResolveablePayport,\n    amountEth: string = 'max',\n    options: TransactionOptions = {}\n  ): Promise<EthereumUnsignedTransaction> {\n    const sweepFlag = amountEth === 'max' ? true : false\n\n    const fromTo = await this.resolveFromTo(from, to)\n    const feeOption = await this.resolveFeeOption(options as FeeOption)\n    const { confirmedBalance: balanceEth } = await this.getBalance(fromTo.fromPayport)\n    const nonce = options.sequenceNumber || await this.getNextSequenceNumber(from)\n\n    const feeWei = new BigNumber(feeOption.feeBase)\n    const balanceWei = this.toBaseDenomination(balanceEth)\n\n    let amountWei: BigNumber\n    if (sweepFlag) {\n      amountWei = (new BigNumber(balanceWei)).minus(feeWei)\n      if (amountWei.isLessThan(0)) {\n        throw new Error(`Insufficient balance (${balanceEth}) to sweep with fee of ${feeOption.feeMain} `)\n      }\n    } else {\n      amountWei = new BigNumber(this.toBaseDenomination(amountEth))\n      if (amountWei.plus(feeWei).isGreaterThan(balanceWei)) {\n        throw new Error(`Insufficient balance (${balanceEth}) to send ${amountEth} including fee of ${feeOption.feeMain} `)\n      }\n    }\n\n    const transactionObject = {\n      from:     fromTo.fromAddress,\n      to:       fromTo.toAddress,\n      value:    `0x${amountWei.toString(16)}`,\n      gas:      `0x${(new BigNumber(ETHEREUM_TRANSFER_COST)).toString(16)}`,\n      gasPrice: `0x${(new BigNumber(feeOption.gasPrice)).toString(16)}`,\n      nonce:    `0x${(new BigNumber(nonce)).toString(16)}`,\n    }\n\n    return {\n      status: TransactionStatus.Unsigned,\n      id: '',\n      fromAddress: fromTo.fromAddress,\n      toAddress: fromTo.toAddress,\n      toExtraId: null,\n      fromIndex: fromTo.fromIndex,\n      toIndex: fromTo.toIndex,\n      amount: this.toMainDenomination(amountWei),\n      fee: feeOption.feeMain,\n      targetFeeLevel: feeOption.targetFeeLevel,\n      targetFeeRate: feeOption.targetFeeRate,\n      targetFeeRateType: feeOption.targetFeeRateType,\n      sequenceNumber: nonce.toString(),\n      data: transactionObject,\n    }\n  }\n}\n\nexport default BaseEthereumPayments\n","import { BaseEthereumPayments } from './BaseEthereumPayments'\nimport { HdEthereumPaymentsConfig, EthereumSignatory } from './types'\nimport { deriveSignatory } from './bip44'\nimport { Payport } from '@faast/payments-common'\nimport { omit } from 'lodash'\n\nexport class HdEthereumPayments extends BaseEthereumPayments<HdEthereumPaymentsConfig> {\n  readonly xprv: string | null\n  readonly xpub: string\n\n  constructor(config: HdEthereumPaymentsConfig) {\n    super(config)\n    try {\n      this.xprv = ''\n      this.xpub = ''\n      if (this.isValidXpub(config.hdKey)) {\n        this.xpub = config.hdKey\n      } else if (this.isValidXprv(config.hdKey)) {\n        this.xprv = config.hdKey\n        this.xpub = deriveSignatory(config.hdKey, 0).xkeys.xpub\n      }\n\n    } catch (e) {\n      throw new Error(`Account must be a valid xprv or xpub: ${e.message}`)\n    }\n  }\n\n  static generateNewKeys(): EthereumSignatory {\n    return deriveSignatory()\n  }\n\n  getXpub(): string {\n    return this.xpub\n  }\n\n  getPublicConfig(): HdEthereumPaymentsConfig {\n    return {\n      ...omit(this.getFullConfig(), ['hdKey', 'logger', 'fullNode', 'solidityNode', 'eventServer']),\n      hdKey: this.getXpub(),\n    }\n  }\n\n  getAccountId(index: number): string {\n    return this.getXpub()\n  }\n\n  getAccountIds(): string[] {\n    return [this.getXpub()]\n  }\n\n  async getPayport(index: number): Promise<Payport> {\n    const { address } = deriveSignatory(this.getXpub(), index)\n    if (!await this.isValidAddress(address)) {\n      // This should never happen\n      throw new Error(`Cannot get address ${index} - validation failed for derived address`)\n    }\n    return { address }\n  }\n\n  async getPrivateKey(index: number): Promise<string> {\n    if (!this.xprv) {\n      throw new Error(`Cannot get private key ${index} - HdEthereumPayments was created with an xpub`)\n    }\n\n    return deriveSignatory(deriveSignatory(this.xprv, 0).xkeys.xprv, index).keys.prv\n  }\n}\n\nexport default HdEthereumPayments\n","import Web3 from 'web3'\nconst web3 = new Web3()\n\nimport { BaseEthereumPayments } from './BaseEthereumPayments'\nimport { KeyPairEthereumPaymentsConfig } from './types'\nimport { Payport } from '@faast/payments-common'\nimport { omit } from 'lodash'\nimport { deriveSignatory } from '../src/bip44'\n\nexport class KeyPairEthereumPayments extends BaseEthereumPayments<KeyPairEthereumPaymentsConfig> {\n  readonly addresses: { [index: number]: string | undefined } = {}\n  readonly privateKeys: { [index: number]: string | null | undefined } = {}\n  readonly addressIndices: { [address: string]: number | undefined } = {}\n\n  constructor(config: KeyPairEthereumPaymentsConfig) {\n    super(config)\n\n    Object.entries(config.keyPairs).forEach(([key, value]) => {\n      if (typeof value === 'undefined' || value === null) {\n        return\n      }\n\n      const i = Number.parseInt(key)\n      let address: string\n      let pkey: string | null = null\n\n      if (web3.utils.isAddress(value)) {\n        address = value\n      } else if (this.isValidPrivateKey(value)) {\n        address = this.privateKeyToAddress(value).toLowerCase()\n      } else if (this.isValidXprv(value)) {\n        // XXX hardened\n        const signatory = deriveSignatory(value)\n        address = signatory.address\n        pkey = signatory.keys.prv\n      } else {\n        throw new Error(`KeyPairEthereumPaymentsConfig.keyPairs[${i}] is not a valid private key or address`)\n      }\n\n      if(typeof this.addressIndices[address] === 'number') {\n        return\n      }\n\n      this.addresses[i] = address\n      this.privateKeys[i] = pkey\n      this.addressIndices[address] = i\n    })\n  }\n\n  getPublicConfig(): KeyPairEthereumPaymentsConfig {\n    return {\n      ...omit(this.getFullConfig(), ['logger', 'fullNode', 'solidityNode', 'eventServer', 'keyPairs']),\n      keyPairs: this.addresses,\n    }\n  }\n\n  getAccountId(index: number): string {\n    const accountId = this.addresses[index] || ''\n    if (!accountId) {\n      throw new Error(`No KeyPairEthereumPayments account configured at index ${index}`)\n    }\n    return accountId\n  }\n\n  getAccountIds(): string[] {\n    return Object.keys(this.addressIndices)\n  }\n\n  async getPayport(index: number): Promise<Payport> {\n    const address = this.addresses[index] || ''\n    if (!await this.isValidAddress(address)) {\n      throw new Error(`Cannot get address ${index} - keyPair[${index}] is undefined or invalid address`)\n    }\n    return { address }\n  }\n\n  async getPrivateKey(index: number): Promise<string> {\n    const privateKey = this.privateKeys[index] || ''\n    if (!this.isValidPrivateKey(privateKey)) {\n      throw new Error(`Cannot get private key ${index} - keyPair[${index}] is undefined`)\n    }\n    return privateKey\n  }\n}\n\nexport default KeyPairEthereumPayments\n","import * as t from 'io-ts'\nimport {\n  extendCodec,\n  Logger,\n  nullable,\n  Numeric\n} from '@faast/ts-common'\nimport {\n  BaseTransactionInfo,\n  BaseUnsignedTransaction,\n  BaseSignedTransaction,\n  BaseBroadcastResult,\n  BaseConfig,\n  Payport,\n  FromTo,\n  ResolveablePayport,\n  ResolvedFeeOption,\n} from '@faast/payments-common'\n\nconst keys = t.type({\n    pub: t.string,\n    prv: t.string,\n})\n\nconst xkeys = t.type({\n  xprv: t.string,\n  xpub: t.string,\n})\n\nconst NullableOptionalString = t.union([t.string, t.null, t.undefined])\nconst OptionalString = t.union([t.string, t.undefined])\n\nexport const EthereumSignatory = t.type(\n  {\n    address: t.string,\n    keys,\n    xkeys,\n  },\n  'EthereumSignatory',\n)\nexport type EthereumSignatory = t.TypeOf<typeof EthereumSignatory>\n\nexport const BaseEthereumPaymentsConfig = extendCodec(\n  BaseConfig,\n  {},\n  {\n    fullNode:   OptionalString,\n    parityNode: OptionalString,\n    gasStation: OptionalString,\n  },\n  'BaseEthereumPaymentsConfig',\n)\nexport type BaseEthereumPaymentsConfig = t.TypeOf<typeof BaseEthereumPaymentsConfig>\n\nexport const HdEthereumPaymentsConfig = extendCodec(\n  BaseEthereumPaymentsConfig,\n  {\n    hdKey: t.string,\n  },\n  'HdEthereumPaymentsConfig',\n)\nexport type HdEthereumPaymentsConfig = t.TypeOf<typeof HdEthereumPaymentsConfig>\n\n\nexport const KeyPairEthereumPaymentsConfig = extendCodec(\n  BaseEthereumPaymentsConfig,\n  {\n    // can be private keys or addresses\n    keyPairs: t.union([t.array(NullableOptionalString), t.record(t.number, NullableOptionalString)]),\n  },\n  'KeyPairEthereumPaymentsConfig',\n)\nexport type KeyPairEthereumPaymentsConfig = t.TypeOf<typeof KeyPairEthereumPaymentsConfig>\n\nexport const EthereumPaymentsConfig = t.union([HdEthereumPaymentsConfig, KeyPairEthereumPaymentsConfig], 'EthereumPaymentsConfig')\nexport type EthereumPaymentsConfig = t.TypeOf<typeof EthereumPaymentsConfig>\n\nexport const EthereumUnsignedTransaction = extendCodec(\n  BaseUnsignedTransaction,\n  {\n    id: t.string,\n    amount: t.string,\n    fee: t.string,\n  },\n  'EthereumUnsignedTransaction',\n)\nexport type EthereumUnsignedTransaction = t.TypeOf<typeof EthereumUnsignedTransaction>\n\nexport const EthereumSignedTransaction = extendCodec(\n  BaseSignedTransaction,\n  {\n    data: t.type({\n      hex: t.string\n    }),\n  },\n  {},\n  'EthereumSignedTransaction'\n)\nexport type EthereumSignedTransaction = t.TypeOf<typeof EthereumSignedTransaction>\n\nexport const EthereumTransactionInfo = extendCodec(\n  BaseTransactionInfo,\n  {},\n  {},\n  'EthereumTransactionInfo')\nexport type EthereumTransactionInfo = t.TypeOf<typeof EthereumTransactionInfo>\n\nexport const EthereumBroadcastResult = extendCodec(\n  BaseBroadcastResult,\n  {},\n  'EthereumBroadcastResult',\n)\nexport type EthereumBroadcastResult = t.TypeOf<typeof EthereumBroadcastResult>\n\nexport const EthereumResolvedFeeOption = extendCodec(\n  ResolvedFeeOption,\n  {\n    gasPrice: t.string,\n  },\n  'EthereumResolvedFeeOption'\n)\nexport type EthereumResolvedFeeOption = t.TypeOf<typeof EthereumResolvedFeeOption>\n\nconst BnRounding = t.union([\n  t.literal(1),\n  t.literal(2),\n  t.literal(3),\n  t.literal(4),\n  t.literal(5),\n  t.literal(6),\n  t.literal(7),\n  t.literal(8),\n])\n\nexport const BaseDenominationOptions = extendCodec(\n  t.object,\n  {},\n  {\n    rounding: BnRounding\n  },\n  'BaseDenominationOptions')\n\nexport type BaseDenominationOptions = t.TypeOf<typeof BaseDenominationOptions>\n","import { PaymentsFactory } from '@faast/payments-common'\nimport {\n  EthereumPaymentsConfig,\n  HdEthereumPaymentsConfig,\n  KeyPairEthereumPaymentsConfig\n} from './types'\nimport { HdEthereumPayments } from './HdEthereumPayments'\nimport { KeyPairEthereumPayments } from './KeyPairEthereumPayments'\n\nexport class EthereumPaymentsFactory implements PaymentsFactory<EthereumPaymentsConfig> {\n  forConfig(config: HdEthereumPaymentsConfig): HdEthereumPayments\n  forConfig(config: KeyPairEthereumPaymentsConfig): KeyPairEthereumPayments\n\n  forConfig(config: EthereumPaymentsConfig) {\n    if (HdEthereumPaymentsConfig.is(config)) {\n      return new HdEthereumPayments(config)\n    }\n    if (KeyPairEthereumPaymentsConfig.is(config)) {\n      return new KeyPairEthereumPayments(config)\n    }\n    throw new Error('Cannot instantiate ethereum payments for unsupported config')\n  }\n}\n\nexport default EthereumPaymentsFactory\n"],"names":["FeeLevel","BigNumber","request.post","request.get","EC","fromBase58","pubToAddress","fromSeed","DelegateLogger","Payport","assertType","isType","FeeOptionCustom","FeeRateType","TransactionStatus","cloneDeep","NetworkType","Tx","PaymentsError","PaymentsErrorCode","omit","web3","t.type","t.string","t.union","t.null","t.undefined","extendCodec","BaseConfig","t.array","t.record","t.number","BaseUnsignedTransaction","BaseSignedTransaction","BaseTransactionInfo","BaseBroadcastResult","ResolvedFeeOption","t.literal","t.object"],"mappings":"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"}