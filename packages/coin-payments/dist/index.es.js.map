{"version":3,"file":"index.es.js","sources":["../src/types.ts","../src/utils.ts","../src/constants.ts","../src/CoinPayments.ts"],"sourcesContent":["import * as t from 'io-ts'\nimport { extendCodec, Logger, optional } from '@faast/ts-common'\nimport { NetworkTypeT } from '@faast/payments-common'\nimport { TronPaymentsConfig, BaseTronPaymentsConfig } from '@faast/tron-payments'\nimport { RipplePaymentsConfig, BaseRipplePaymentsConfig } from '@faast/ripple-payments'\nimport { StellarPaymentsConfig, BaseStellarPaymentsConfig } from '@faast/stellar-payments'\nimport { BitcoinPaymentsConfig, BaseBitcoinPaymentsConfig } from '@faast/bitcoin-payments'\nimport { EthereumPaymentsConfig, BaseEthereumPaymentsConfig } from '@faast/ethereum-payments'\n\nexport const baseAssetConfigCodecs = {\n  TRX: BaseTronPaymentsConfig,\n  XRP: BaseRipplePaymentsConfig,\n  XLM: BaseStellarPaymentsConfig,\n  BTC: BaseBitcoinPaymentsConfig,\n  ETH: BaseEthereumPaymentsConfig,\n}\n\nexport const CoinPaymentsBaseAssetConfigs = t.type(baseAssetConfigCodecs, 'CoinPaymentsBaseAssetConfigs')\nexport type CoinPaymentsBaseAssetConfigs = t.TypeOf<typeof CoinPaymentsBaseAssetConfigs>\n\nexport const assetConfigCodecs = {\n  TRX: TronPaymentsConfig,\n  XRP: RipplePaymentsConfig,\n  XLM: StellarPaymentsConfig,\n  BTC: BitcoinPaymentsConfig,\n  ETH: EthereumPaymentsConfig,\n}\nexport const CoinPaymentsAssetConfigs = t.type(assetConfigCodecs, 'CoinPaymentsAssetConfigs')\nexport type CoinPaymentsAssetConfigs = t.TypeOf<typeof CoinPaymentsAssetConfigs>\n\nexport const SupportedCoinPaymentsSymbol = t.keyof(assetConfigCodecs, 'SupportedCoinPaymentsSymbol')\nexport type SupportedCoinPaymentsSymbol = t.TypeOf<typeof SupportedCoinPaymentsSymbol>\n\nexport type CoinPaymentsPartialAssetConfigs = {\n  [T in SupportedCoinPaymentsSymbol]?: Partial<CoinPaymentsAssetConfigs[T]>\n}\nexport const CoinPaymentsPartialAssetConfigs = t.partial(\n  baseAssetConfigCodecs,\n  'CoinPaymentsPartialAssetConfigs',\n) as t.Type<CoinPaymentsPartialAssetConfigs>\n\nexport const CoinPaymentsConfig = extendCodec(\n  CoinPaymentsPartialAssetConfigs,\n  {},\n  {\n    network: NetworkTypeT,\n    logger: Logger,\n    seed: t.string,\n  },\n  'CoinPaymentsConfig',\n)\nexport type CoinPaymentsConfig = t.TypeOf<typeof CoinPaymentsConfig>\n","\nexport function keysOf<T extends { [k: string]: any } | { [k: number]: any }>(o: T): (keyof T)[] {\n  return Object.keys(o) as (keyof T)[]\n}\n","import { PaymentsFactory } from '@faast/payments-common'\nimport { TronPaymentsFactory } from '@faast/tron-payments'\nimport { RipplePaymentsFactory } from '@faast/ripple-payments'\nimport { StellarPaymentsFactory } from '@faast/stellar-payments'\nimport { BitcoinPaymentsFactory } from '@faast/bitcoin-payments'\nimport { EthereumPaymentsFactory } from '@faast/ethereum-payments'\n\nimport { keysOf } from './utils'\nimport { SupportedCoinPaymentsSymbol } from './types'\n\nexport const PAYMENTS_FACTORIES: {\n  [A in SupportedCoinPaymentsSymbol]: PaymentsFactory\n} = {\n  TRX: new TronPaymentsFactory(),\n  XRP: new RipplePaymentsFactory(),\n  XLM: new StellarPaymentsFactory(),\n  BTC: new BitcoinPaymentsFactory(),\n  ETH: new EthereumPaymentsFactory(),\n}\n\nexport const SUPPORTED_ASSET_SYMBOLS = keysOf(PAYMENTS_FACTORIES)\n","import * as bip32 from 'bip32'\nimport * as bip39 from 'bip39'\nimport { assertType, Logger } from '@faast/ts-common'\nimport { PaymentsFactory, AnyPayments, NetworkType } from '@faast/payments-common'\n\nimport {\n  CoinPaymentsConfig,\n  SupportedCoinPaymentsSymbol,\n  CoinPaymentsAssetConfigs,\n  assetConfigCodecs,\n} from './types'\nimport { keysOf } from './utils'\nimport { SUPPORTED_ASSET_SYMBOLS, PAYMENTS_FACTORIES } from './constants'\nimport { omit } from 'lodash'\n\nfunction addSeedIfNecessary(network: SupportedCoinPaymentsSymbol, seed: Buffer, config: object) {\n  const configCodec = assetConfigCodecs[network]\n  let result = config\n  if (configCodec.is(result)) {\n    return result\n  }\n  result = {\n    ...config,\n    seed: seed.toString('hex')\n  }\n  if (configCodec.is(result)) {\n    return result\n  }\n  result = {\n    ...config,\n    hdKey: bip32.fromSeed(seed).toBase58(),\n  }\n  if (configCodec.is(result)) {\n    return result\n  }\n  throw new Error(`Invalid config provided for ${network}`)\n}\n\nexport class CoinPayments {\n  readonly payments: { [A in SupportedCoinPaymentsSymbol]?: AnyPayments } = {}\n  readonly accountIds: string[]\n  readonly network: NetworkType\n  readonly logger: Logger\n\n  constructor(public readonly config: CoinPaymentsConfig) {\n    assertType(CoinPaymentsConfig, config)\n    this.network = config.network || NetworkType.Mainnet\n    this.logger = config.logger || console\n    const seedBuffer = config.seed && (config.seed.includes(' ')\n      ? bip39.mnemonicToSeedSync(config.seed)\n      : Buffer.from(config.seed, 'hex'))\n    const accountIdSet = new Set<string>()\n    SUPPORTED_ASSET_SYMBOLS.forEach((assetSymbol) => {\n      let assetConfig = config[assetSymbol]\n      if (seedBuffer) {\n        assetConfig = addSeedIfNecessary(assetSymbol, seedBuffer, assetConfig || {})\n      }\n      if (!assetConfig) {\n        return\n      }\n      // Clone to avoid mutating external objects\n      assetConfig = { ...assetConfig }\n\n      if (config.network) {\n        assetConfig.network = config.network\n      }\n      if (config.logger) {\n        assetConfig.logger = config.logger\n      }\n      assertType(assetConfigCodecs[assetSymbol] as any, assetConfig, `${assetSymbol} config`)\n      const assetPayments = PAYMENTS_FACTORIES[assetSymbol].forConfig(assetConfig)\n      this.payments[assetSymbol] = assetPayments\n      assetPayments.getAccountIds().forEach((id) => accountIdSet.add(id))\n    })\n    this.accountIds = Array.from(accountIdSet)\n  }\n\n  static getFactory(assetSymbol: SupportedCoinPaymentsSymbol): PaymentsFactory {\n    const paymentsFactory = PAYMENTS_FACTORIES[assetSymbol]\n    if (!paymentsFactory) {\n      throw new Error(`No payment factory configured for asset symbol ${assetSymbol}`)\n    }\n    return paymentsFactory\n  }\n\n  static getPayments<A extends SupportedCoinPaymentsSymbol>(\n    assetSymbol: A,\n    config: CoinPaymentsAssetConfigs[A],\n  ): AnyPayments {\n    const factory = CoinPayments.getFactory(assetSymbol)\n    return factory.forConfig(config)\n  }\n\n  getPublicConfig(): CoinPaymentsConfig {\n    return keysOf(this.payments).reduce((o, k) => {\n      const publicConfig = this.forAsset(k).getPublicConfig()\n      // Ensure we don't accidentally expose sensitive fields\n      if (publicConfig.seed) {\n        delete publicConfig.seed\n      }\n      if (publicConfig.hdKey && publicConfig.hdKey.startsWith('xprv')) {\n        delete publicConfig.hdKey\n      }\n      o[k] = publicConfig\n      return o\n    }, {} as CoinPaymentsConfig)\n  }\n\n  getAccountIds(): string[] {\n    return this.accountIds\n  }\n\n  forAsset(assetSymbol: SupportedCoinPaymentsSymbol): AnyPayments {\n    const assetPayments = this.payments[assetSymbol]\n    if (!assetPayments) {\n      throw new Error(`No payments interface configured for ${assetSymbol}`)\n    }\n    return assetPayments\n  }\n\n  isAssetSupported(assetSymbol: string): assetSymbol is SupportedCoinPaymentsSymbol {\n    return SupportedCoinPaymentsSymbol.is(assetSymbol)\n  }\n\n  isAssetConfigured(assetSymbol: SupportedCoinPaymentsSymbol): boolean {\n    return Boolean(this.payments[assetSymbol])\n  }\n\n}\n\nexport default CoinPayments\n"],"names":["t.type","t.keyof","t.partial","t.string","bip32.fromSeed","bip39.mnemonicToSeedSync"],"mappings":"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"}